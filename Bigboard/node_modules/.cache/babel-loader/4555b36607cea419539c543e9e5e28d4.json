{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\saite\\\\Desktop\\\\Bigboard\\\\Front-end-project--Bigboard\\\\Bigboard\\\\src\\\\TableBox.js\";\nimport React from \"react\"; // import '../css/styles.css';\n// import '../css/TableDataCard.css';\n\nimport \"./TableBox.css\";\n\nclass TableBox extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currency: \"$\"\n    };\n  }\n\n  // sortTable = (n) => {\n  //     var table, rows, switching, i, x, y, shouldSwitch, order, switchcount = 0;\n  //     table = document.getElementsByTagName(\"tbody\")[0];\n  //     switching = true;\n  //     // var text = document.getElementById(thid).innerHTML;\n  //     // text = text.substring(0,text.length-1);\n  //     order = \"asc\";\n  //     console.log(table.childNodes.length);\n  //     console.log(table.childNodes)\n  //     // var rowsRangeVal = document.getElementById(\"rowsrange\").value;\n  //     while (switching) {\n  //         switching = false;\n  //         rows = table.childNodes.length;\n  //         for (i = 0; i < (rows - 1); i++) {\n  //             shouldSwitch = false;\n  //             x = rows[i].getElementsByTagName(\"TD\")[n];\n  //             console.log(x)\n  //             y = rows[i + 1].getElementsByTagName(\"TD\")[n];\n  //             console.log(y)\n  //             if (order == \"asc\") {\n  //                 if ((+x.innerHTML) > (+y.innerHTML)) {\n  //                     shouldSwitch= true;\n  //                     break;\n  //                 }\n  //             } else if (order == \"desc\") {\n  //                 if ((+x.innerHTML) < (+y.innerHTML)) {\n  //                     shouldSwitch = true;\n  //                     break;\n  //                 }\n  //             }\n  //         }\n  //         if (shouldSwitch) {\n  //         rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);\n  //         switching = true;\n  //         switchcount ++;\n  //         } else {\n  //         if (switchcount == 0 && order == \"asc\") {\n  //             order = \"desc\";\n  //             switching = true;\n  //         }\n  //         }\n  //     }\n  // }\n  render() {\n    let tableDataDOM = \"\";\n    console.log(\"test\"); // @dom: show all values in the table\n\n    tableDataDOM = this.props.table_Values.map((table, index) => {\n      console.log(this.props.table_Values);\n      console.log(index); // @condition: check if there is a viable response from the API call (e.g. AAAA doesn't exist)\n\n      if (table !== \"Symbol not supported\") {\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: table.stockcode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: JSON.stringify(new Date(table.t * 1000)).split(\"T\")[0].replace('\"', \"\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"openrow\",\n            children: this.state.currency + table.o.toFixed(2)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"lowrow\",\n            children: this.state.currency + table.l.toFixed(2)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"highrow\",\n            children: this.state.currency + table.h.toFixed(2)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"pcloserow\",\n            children: this.state.currency + table.pc.toFixed(2)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"closerow\",\n            children: this.state.currency + table.c.toFixed(2)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"lastrow\",\n            children: (100 - table.pc.toFixed(2) / table.c.toFixed(2) * 100).toFixed(2) + \"%\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this);\n      }\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"item-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"table-heading\",\n        children: \"Your Companies Latest Stock values:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), this.props.show_Table ? /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"table table-striped\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Stock Code\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Last Updated Data\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              onClick: () => this.sortTable(2),\n              children: \"Open Price\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Low Price\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"High Price\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Previous Close Price\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Current Price\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"% From Yesterday\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: tableDataDOM\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default TableBox;","map":{"version":3,"sources":["C:/Users/saite/Desktop/Bigboard/Front-end-project--Bigboard/Bigboard/src/TableBox.js"],"names":["React","TableBox","Component","state","currency","render","tableDataDOM","console","log","props","table_Values","map","table","index","stockcode","JSON","stringify","Date","t","split","replace","o","toFixed","l","h","pc","c","show_Table","sortTable"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n// import '../css/styles.css';\r\n// import '../css/TableDataCard.css';\r\nimport \"./TableBox.css\";\r\n\r\nclass TableBox extends React.Component {\r\n  state = {\r\n    currency: \"$\",\r\n  };\r\n\r\n  // sortTable = (n) => {\r\n  //     var table, rows, switching, i, x, y, shouldSwitch, order, switchcount = 0;\r\n  //     table = document.getElementsByTagName(\"tbody\")[0];\r\n  //     switching = true;\r\n  //     // var text = document.getElementById(thid).innerHTML;\r\n  //     // text = text.substring(0,text.length-1);\r\n\r\n  //     order = \"asc\";\r\n  //     console.log(table.childNodes.length);\r\n  //     console.log(table.childNodes)\r\n  //     // var rowsRangeVal = document.getElementById(\"rowsrange\").value;\r\n\r\n  //     while (switching) {\r\n\r\n  //         switching = false;\r\n  //         rows = table.childNodes.length;\r\n\r\n  //         for (i = 0; i < (rows - 1); i++) {\r\n\r\n  //             shouldSwitch = false;\r\n\r\n  //             x = rows[i].getElementsByTagName(\"TD\")[n];\r\n  //             console.log(x)\r\n\r\n  //             y = rows[i + 1].getElementsByTagName(\"TD\")[n];\r\n  //             console.log(y)\r\n\r\n  //             if (order == \"asc\") {\r\n  //                 if ((+x.innerHTML) > (+y.innerHTML)) {\r\n\r\n  //                     shouldSwitch= true;\r\n  //                     break;\r\n  //                 }\r\n  //             } else if (order == \"desc\") {\r\n  //                 if ((+x.innerHTML) < (+y.innerHTML)) {\r\n\r\n  //                     shouldSwitch = true;\r\n  //                     break;\r\n  //                 }\r\n  //             }\r\n\r\n  //         }\r\n  //         if (shouldSwitch) {\r\n\r\n  //         rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);\r\n  //         switching = true;\r\n\r\n  //         switchcount ++;\r\n  //         } else {\r\n\r\n  //         if (switchcount == 0 && order == \"asc\") {\r\n  //             order = \"desc\";\r\n  //             switching = true;\r\n  //         }\r\n  //         }\r\n  //     }\r\n\r\n  // }\r\n\r\n  render() {\r\n    let tableDataDOM = \"\";\r\n    console.log(\"test\");\r\n\r\n    // @dom: show all values in the table\r\n    tableDataDOM = this.props.table_Values.map((table, index) => {\r\n      console.log(this.props.table_Values);\r\n      console.log(index);\r\n\r\n      // @condition: check if there is a viable response from the API call (e.g. AAAA doesn't exist)\r\n      if (table !== \"Symbol not supported\") {\r\n        return (\r\n          <tr key={index}>\r\n            <td>{table.stockcode}</td>\r\n            <td>\r\n              {JSON.stringify(new Date(table.t * 1000))\r\n                .split(\"T\")[0]\r\n                .replace('\"', \"\")}\r\n            </td>\r\n\r\n            {/* Open Price */}\r\n            <td className=\"openrow\">\r\n              {this.state.currency + table.o.toFixed(2)}\r\n            </td>\r\n\r\n            {/* Low Price */}\r\n            <td className=\"lowrow\">\r\n              {this.state.currency + table.l.toFixed(2)}\r\n            </td>\r\n\r\n            {/* High Price */}\r\n            <td className=\"highrow\">\r\n              {this.state.currency + table.h.toFixed(2)}\r\n            </td>\r\n\r\n            {/* Previous Close Price */}\r\n            <td className=\"pcloserow\">\r\n              {this.state.currency + table.pc.toFixed(2)}\r\n            </td>\r\n\r\n            {/* Close Price */}\r\n            <td className=\"closerow\">\r\n              {this.state.currency + table.c.toFixed(2)}\r\n            </td>\r\n\r\n            {/* PC/C percentage */}\r\n            <td className=\"lastrow\">\r\n              {(100 - (table.pc.toFixed(2) / table.c.toFixed(2)) * 100).toFixed(\r\n                2\r\n              ) + \"%\"}\r\n            </td>\r\n          </tr>\r\n        );\r\n      }\r\n    });\r\n\r\n    return (\r\n      <div className=\"item-table\">\r\n        <h5 className=\"table-heading\">Your Companies Latest Stock values:</h5>\r\n        {this.props.show_Table ? (\r\n          <table className=\"table table-striped\">\r\n            <thead>\r\n              <tr>\r\n                {/* <th scope=\"col\">Stock Code</th>\r\n                <th scope=\"col\">Last Updated Data</th>\r\n                <th scope=\"col\">Open Price</th>\r\n                <th scope=\"col\">Low Price</th>\r\n                <th scope=\"col\">High Price</th>\r\n                <th scope=\"col\">Previous Close Price</th>\r\n                <th scope=\"col\">Current Price</th>\r\n                <th scope=\"col\">% From Yesterday</th> */}\r\n                <th>Stock Code</th>\r\n                <th>Last Updated Data</th>\r\n                <th onClick={() => this.sortTable(2)}>Open Price</th>\r\n                <th>Low Price</th>\r\n                <th>High Price</th>\r\n                <th>Previous Close Price</th>\r\n                <th>Current Price</th>\r\n                <th>% From Yesterday</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>{tableDataDOM}</tbody>\r\n          </table>\r\n        ) : (\r\n          <p></p>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TableBox;\r\n"]},"metadata":{},"sourceType":"module"}